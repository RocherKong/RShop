<?xml version="1.0" encoding="utf-8" ?>
<!--
*******************************
 Create By Ahoo Wang 
 Date 2016-03-23 16:22
*******************************
-->
<!--需要设置 SqlNameSpace 一般设置为TableName -->
<sqlMap namespace="T_Product" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <alias>
    <!--设置查询映射表实体-->
    <typeAlias alias="T_Product" type="RShop.TradingCenter.Entity.T_Product,RShop.TradingCenter.Entity" />
    <typeAlias alias="V_Product" type="RShop.TradingCenter.Entity.Views.V_Product,RShop.TradingCenter.Entity" />
    <typeAlias alias="T_ProductDoc" type="RShop.TradingCenter.Entity.T_ProductDoc,RShop.TradingCenter.Entity" />
  </alias>
  <!--缓存策略-->
  <cacheModels>
    <cacheModel id="T_Product_EntityCache" implementation="MEMORY">
      <flushInterval hours="24"/>
      <flushOnExecute statement="T_Product.Insert"/>
      <flushOnExecute statement="T_Product.Delete"/>
      <flushOnExecute statement="T_Product.Update"/>
    </cacheModel>
  </cacheModels>
  <statements>
    <!--公共查询参数片段-->
    <sql id="QueryParams">
      Where T.IsDelete=0
      <isNotEmpty prepend="And" property="CategoryId">
        T.CategoryId = #CategoryId#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="BrandId">
        T.BrandId = #BrandId#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="ProductModel">
        T.ProductModel Like  '%' + #ProductModel# + '%'
      </isNotEmpty>
    </sql>

    <!--新增-->
    <insert id="Insert" parameterClass="T_Product">
      INSERT INTO T_Product     
      (ProductName        
      ,ProductModel        
      ,ProductType        
      ,CategoryId        
      ,BrandId        
      ,MarketPrice        
      ,CoverImage        
      ,Description        
      ,ProductStatus        
      ,Remark        
      ,SortId        
      ,IsDelete        
      ,CreateTime        
      ,Creator)
      VALUES
      (#ProductName#        
      ,#ProductModel#        
      ,#ProductType#        
      ,#CategoryId#        
      ,#BrandId#        
      ,#MarketPrice#        
      ,#CoverImage#        
      ,#Description#        
      ,#ProductStatus#        
      ,#Remark#        
      ,#SortId#        
      ,#IsDelete#        
      ,#CreateTime#        
      ,#Creator#)    
      <selectKey property="Id" type="post" resultClass="long">
        Select @@IDENTITY
      </selectKey>
    </insert>
    
    <!--逻辑删除-->
    <update id="Delete" parameterClass="Hashtable">
      UPDATE T_Product
      SET IsDelete=1 Where Id=#Id#
    </update>
    
    <!--逻辑删除-->
    <update id="DeleteList" parameterClass="Hashtable">
      UPDATE T_Product
      SET IsDelete=1 Where Id
      <iterate prepend="In" property="Ids" open="(" close=")" conjunction=",">#Ids[]#</iterate>
    </update>
    
    <!--更新-->
    <update id="Update" parameterClass="T_Product">
      UPDATE T_Product
      SET 
      ProductName = #ProductName#
      ,ProductModel = #ProductModel#
      ,ProductType = #ProductType#
      ,CategoryId = #CategoryId#
      ,BrandId = #BrandId#
      ,MarketPrice = #MarketPrice#
      ,CoverImage = #CoverImage#
      ,Description = #Description#
      ,ProductStatus = #ProductStatus#
      ,Remark = #Remark#
      ,SortId = #SortId#
      ,IsDelete = #IsDelete#
      ,CreateTime = #CreateTime#
      ,Creator = #Creator#
      WHERE Id=#Id#
    </update>
    
    <!--获取数据列-->
    <select id="GetList" parameterClass="Hashtable" resultClass="T_Product">
      SELECT T.* From T_Product T
      <include refid="QueryParams"/>
      Order By T.Id DESC
    </select>

	<!--获取分页数据-->
    <select id="GetListByPage" parameterClass="Hashtable" resultClass="V_Product">
      Select TT.*,TPC.CategoryName,TB.BrandName From (Select ROW_NUMBER() Over(Order By T.Id DESC) Row_Index,T.*
      From T_Product T
      <include refid="QueryParams"/>
      ) TT Left join T_ProductCategory AS TPC on TT.CategoryId=TPC.Id
      LEFT JOIN T_Brand AS TB ON TB.Id=TT.BrandId
      Where TT.Row_Index Between ((#PageIndex#-1)*#PageSize#+1) And (#PageIndex#*#PageSize#)
    </select>
       
    <!--获取记录数-->
    <select id="GetRecord" parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_Product T
      <include refid="QueryParams"/>
    </select>
    
    <!--获取表映射实体-->
    <select id="GetEntity" parameterClass="Hashtable" resultClass="T_Product">
      Select Top 1 T.* From T_Product T
      Where T.IsDelete=0 
      <isNotEmpty prepend="And" property="Id">
        T.Id=#Id#
      </isNotEmpty>
    </select>
    
    <!--是否存在该记录-->
    <select id="IsExist"  parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_Product T
      <include refid="QueryParams"/>
    </select>
    
	<!--获取前N行数据-->
    <select id="GetTop" parameterClass="Hashtable" resultClass="T_Product">
      Select Top (#Num#) * From T_Product T
      <include refid="QueryParams"/>
      <isNotEmpty prepend="And" property="ProductModel">
        T.ProductModel=#ProductModel#
      </isNotEmpty>
    </select>


    <update id="DeleteDocAll" parameterClass="Hashtable">
      UPDATE T_ProductDoc
      SET IsDelete=1
      WHERE ProductId=#ProductId#
    </update>
    <!--是否存在该记录-->
    <select id="IsDocRealExist"  parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_ProductDoc T
      WHERE T.ProductId=#ProductId#
      AND T.DocTitle=#DocTitle#
      AND T.DocLink=#DocLink#
    </select>
    <select id="IsDocLinkRealExist"  parameterClass="T_ProductDoc" resultClass="int">
      Select Count(1) From T_ProductDoc T
      WHERE T.ProductId=#ProductId#
      AND T.DocLink=#DocLink#
    </select>
    <update id="ProDocUpdate" parameterClass="T_ProductDoc">
      UPDATE T_ProductDoc
      SET
      SortId = #SortId#
      ,IsDelete = #IsDelete#
      ,CreateTime = #CreateTime#
      ,Creator = #Creator#
      WHERE  ProductId = #ProductId#
      AND DocTitle = #DocTitle#
      AND DocLink = #DocLink#
    </update>


    <!--新增-->
    <insert id="ProDocInsert" parameterClass="T_ProductDoc">
      INSERT INTO T_ProductDoc
      (ProductId
      ,DocTitle
      ,DocLink
      ,SortId
      ,IsDelete
      ,CreateTime
      ,Creator)
      VALUES
      (#ProductId#
      ,#DocTitle#
      ,#DocLink#
      ,#SortId#
      ,#IsDelete#
      ,#CreateTime#
      ,#Creator#)
    </insert>

    <!--获取数据列-->
    <select id="GetDocList" parameterClass="Hashtable" resultClass="T_ProductDoc">
      SELECT T.* From T_ProductDoc T
      <include refid="QueryParams"/>
      <isNotEmpty prepend="AND" property="ProductId">
        T.ProductId=#ProductId#
      </isNotEmpty>
      Order By T.SortId ASC
    </select>

    <update id="UpdateDoc" parameterClass="T_ProductDoc">
      UPDATE T_ProductDoc
      SET
      DocTitle=#DocTitle#
      ,SortId = #SortId#
      ,IsDelete = #IsDelete#
      ,CreateTime = #CreateTime#
      ,Creator = #Creator#
      WHERE  ProductId = #ProductId#
      AND DocLink = #DocLink#
    </update>

  </statements>
</sqlMap>