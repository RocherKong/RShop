<?xml version="1.0" encoding="utf-8" ?>
<!--
*******************************
 Create By Ahoo Wang 
 Date 2016-04-11 11:38
*******************************
-->
<!--需要设置 SqlNameSpace 一般设置为TableName -->
<sqlMap namespace="T_Member" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <alias>
    <!--设置查询映射表实体-->
    <typeAlias alias="T_Member" type="MaiDao.TradingCenter.Entity.T_Member,MaiDao.TradingCenter.Entity" />
  </alias>
  <!--缓存策略-->
  <cacheModels>
    <cacheModel id="T_Member_EntityCache" implementation="MEMORY">
      <flushInterval hours="24"/>
      <flushOnExecute statement="T_Member.Insert"/>
      <flushOnExecute statement="T_Member.Delete"/>
      <flushOnExecute statement="T_Member.Update"/>
    </cacheModel>
  </cacheModels>
  <statements>
    <!--公共查询参数片段-->
    <sql id="QueryParams">
      Where T.IsDelete=0
      <isNotEmpty prepend="And" property="LoginName">
        T.LoginName Like  '%' + #LoginName# + '%'
      </isNotEmpty>
      <isNotEmpty prepend="And" property="IsIndividual">
        Type=1
        And Not Exists(Select * From Rel_Member_Enterprise ME
        Where T.Id=ME.MemberId )
      </isNotEmpty>
    </sql>

    <!--新增-->
    <insert id="Insert" parameterClass="T_Member">
      INSERT INTO T_Member
      (LoginName
      ,NickName
      ,TrueName
      ,Avatar
      ,Password
      ,EMail
      ,Sex
      ,MobilePhone
      ,Status
      ,Type
      ,RegisterFrom
      ,LastLogOnTime
      ,IsDelete
      ,CreateTime
      ,Creator)
      VALUES
      (#LoginName#
      ,#NickName#
      ,#TrueName#
      ,#Avatar#
      ,#Password#
      ,#EMail#
      ,#Sex#
      ,#MobilePhone#
      ,#Status#
      ,#Type#
      ,#RegisterFrom#
      ,GetDate()
      ,#IsDelete#
      ,GetDate()
      ,#Creator#)
      <selectKey property="Id" type="post" resultClass="long">
        Select @@IDENTITY
      </selectKey>
    </insert>

    <!--逻辑删除-->
    <update id="Delete" parameterClass="Hashtable">
      UPDATE T_Member
      SET IsDelete=1 Where Id=#Id#
    </update>

    <!--逻辑删除-->
    <update id="DeleteList" parameterClass="Hashtable">
      UPDATE T_Member
      SET IsDelete=1 Where Id
      <iterate prepend="In" property="Ids" open="(" close=")" conjunction=",">#Ids[]#</iterate>
    </update>

    <!--更新-->
    <update id="Update" parameterClass="T_Member">
      UPDATE T_Member
      SET
      LoginName = #LoginName#
      ,NickName = #NickName#
      ,TrueName = #TrueName#
      ,Avatar = #Avatar#
      ,Password = #Password#
      ,EMail = #EMail#
      ,Sex = #Sex#
      ,MobilePhone = #MobilePhone#
      ,Status = #Status#
      ,Type=#Type#
      ,RegisterFrom = #RegisterFrom#
      WHERE Id=#Id#
    </update>

    <!--获取数据列-->
    <select id="GetList" parameterClass="Hashtable" resultClass="T_Member">
      SELECT T.* From T_Member T
      <include refid="QueryParams"/>
      Order By T.Id DESC
    </select>

    <!--获取分页数据-->
    <select id="GetListByPage" parameterClass="Hashtable" resultClass="T_Member">
      Select * From (Select ROW_NUMBER() Over(Order By T.Id DESC) Row_Index,T.*
      From T_Member T
      <include refid="QueryParams"/>
      ) TT
      Where TT.Row_Index Between ((#PageIndex#-1)*#PageSize#+1) And (#PageIndex#*#PageSize#)
    </select>

    <!--获取记录数-->
    <select id="GetRecord" parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_Member T
      <include refid="QueryParams"/>
    </select>

    <!--获取表映射实体-->
    <select id="GetEntity" parameterClass="Hashtable" resultClass="T_Member">
      Select Top 1 T.* From T_Member T
      Where T.IsDelete=0
      <isNotEmpty prepend="And" property="Id">
        T.Id=#Id#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="EnterpriseId">
        Exists(Select * From Rel_Member_Enterprise ME Where ME.EnterpriseId=#EnterpriseId# And Me.IsRoot=1 And Me.MemberId=T.Id)
      </isNotEmpty>
    </select>

    <!--是否存在该记录-->
    <select id="IsExist"  parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_Member T
      Where T.IsDelete=0
      <isNotEmpty prepend="And" property="EMail">
        T.EMail=#EMail#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="LoginName">
        T.LoginName=#LoginName#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="MobilePhone">
        T.MobilePhone=#MobilePhone#
      </isNotEmpty>
    </select>

    <!--获取前N行数据-->
    <select id="GetTop" parameterClass="Hashtable" resultClass="T_Member">
      Select Top (#Num#) * From T_Member T
      <include refid="QueryParams"/>
    </select>

    <select id="LogOn" parameterClass="Hashtable" resultClass="T_Member">
      Select Top (1) * From T_Member T
      Where T.IsDelete=0 And T.Password=#Password#
      <isNotEmpty prepend="And" property="LoginName">
        T.LoginName=#LoginName#
      </isNotEmpty>
      <isNotEmpty prepend="And" property="EMail">
        T.EMail=#EMail#
      </isNotEmpty>
    </select>

    <!--Rel_Member_Enterprise-->
    <select id="GetRelEnterpriseById" parameterClass="Hashtable" resultClass="Rel_Member_Enterprise">
      Select Top 1 T.* From Rel_Member_Enterprise T
      Where T.MemberId=#MemberId#
    </select>
    
    <insert id="InsertRelEnterprise" parameterClass="Rel_Member_Enterprise">
      INSERT INTO Rel_Member_Enterprise
      (MemberId,
      EnterpriseId
      ,Department
      ,Title
      ,IsRoot
      ,Status)
      VALUES
      (#MemberId#,
      #EnterpriseId#
      ,#Department#
      ,#Title#
      ,#IsRoot#
      ,#Status#)
    </insert>
    <update id="UpdateRelEnterprise" parameterClass="Rel_Member_Enterprise">
      UPDATE Rel_Member_Enterprise
      SET
      EnterpriseId = #EnterpriseId#
      ,Department = #Department#
      ,Title = #Title#
      ,IsRoot = #IsRoot#
      ,Status=#Status#
      WHERE MemberId=#MemberId#
    </update>
    <!--获取数据列-->
    <select id="GetSubAccounts" parameterClass="Hashtable" resultClass="T_Member">
      SELECT T.* From T_Member T
      Where
      Exists(Select * From Rel_Member_Enterprise ME
      Where ME.Status=1
      T.Id=ME.MemberId And Me.EnterpriseId=#EnterpriseId# And ME.IsRoot=0)
    </select>

    <select id="GetRootRelEnterpriseByEnterpriseId" parameterClass="Hashtable" resultClass="Rel_Member_Enterprise">
      Select Top 1 T.* From Rel_Member_Enterprise T
      Where T.EnterpriseId=#EnterpriseId# And T.IsRoot=1
    </select>
  </statements>
</sqlMap>