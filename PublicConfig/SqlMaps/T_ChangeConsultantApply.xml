<?xml version="1.0" encoding="utf-8" ?>
<!--
*******************************
// Create By Rocher Kong  
 Date 2016-04-17 19:16
*******************************
-->
<!--需要设置 SqlNameSpace 一般设置为TableName -->
<sqlMap namespace="T_ChangeConsultantApply" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <alias>
    <!--设置查询映射表实体-->
    <typeAlias alias="T_ChangeConsultantApply" type="MaiDao.TradingCenter.Entity.T_ChangeConsultantApply,MaiDao.TradingCenter.Entity" />
    <typeAlias alias="V_ChangeConsultantApply" type="MaiDao.TradingCenter.Entity.Views.V_ChangeConsultantApply,MaiDao.TradingCenter.Entity" />
    
  </alias>
  <!--缓存策略-->
  <cacheModels>
    <cacheModel id="T_ChangeConsultantApply_EntityCache" implementation="MEMORY">
      <flushInterval hours="24"/>
      <flushOnExecute statement="T_ChangeConsultantApply.Insert"/>
      <flushOnExecute statement="T_ChangeConsultantApply.Delete"/>
      <flushOnExecute statement="T_ChangeConsultantApply.Update"/>
    </cacheModel>
  </cacheModels>
  <statements>
    <!--公共查询参数片段-->
    <sql id="QueryParams">
      Where T.IsDelete=0
    </sql>

    <sql id="QueryVParams">
      <isNotEmpty prepend="AND" property="LoginName">
        TM.LoginName like '%'+#UserName#+'%'
      </isNotEmpty>
      <isNotEmpty prepend="AND" property="UserName">
        TM.LoginName like '%'+#UserName#+'%'
      </isNotEmpty>
      <isNotEmpty prepend="AND" property="Status">
        T.Status=#Status#
      </isNotEmpty>
    </sql>
   

    <!--新增-->
    <insert id="Insert" parameterClass="T_ChangeConsultantApply">
      INSERT INTO T_ChangeConsultantApply
      (MemberId
      ,AdministratorId
      ,Reason
      ,Remark
      ,Status
      ,IsDelete
      ,CreateTime
      ,Creator)
      VALUES
      (#MemberId#
      ,#AdministratorId#
      ,#Reason#
      ,#Remark#
      ,#Status#
      ,#IsDelete#
      ,#CreateTime#
      ,#Creator#)
      <selectKey property="Id" type="post" resultClass="long">
        Select @@IDENTITY
      </selectKey>
    </insert>

    <!--逻辑删除-->
    <update id="Delete" parameterClass="Hashtable">
      UPDATE T_ChangeConsultantApply
      SET IsDelete=1 Where Id=#Id#
    </update>

    <!--逻辑删除-->
    <update id="DeleteList" parameterClass="Hashtable">
      UPDATE T_ChangeConsultantApply
      SET IsDelete=1 Where Id
      <iterate prepend="In" property="Ids" open="(" close=")" conjunction=",">#Ids[]#</iterate>
    </update>

    <!--更新-->
    <update id="Update" parameterClass="T_ChangeConsultantApply">
      UPDATE T_ChangeConsultantApply
      SET
      MemberId = #MemberId#
      ,AdministratorId = #AdministratorId#
      ,Reason = #Reason#
      ,Remark = #Remark#
      ,Status = #Status#
      ,IsDelete = #IsDelete#
      ,CreateTime = #CreateTime#
      ,Creator = #Creator#
      WHERE Id=#Id#
    </update>

    <update id="setDone" parameterClass="Hashtable">
      UPDATE T_ChangeConsultantApply
      SET Status=#Status# Where IsDelete=0
      AND MemberId=#MemberId#
    </update>
    

    <!--获取数据列-->
    <select id="GetList" parameterClass="Hashtable" resultClass="T_ChangeConsultantApply">
      SELECT T.* From T_ChangeConsultantApply T
      <include refid="QueryParams"/>
      Order By T.Id DESC
    </select>

    <!--获取分页数据-->
    <select id="GetListByPage" parameterClass="Hashtable" resultClass="T_ChangeConsultantApply">
      Select * From (Select ROW_NUMBER() Over(Order By T.Id DESC) Row_Index,T.*
      From T_ChangeConsultantApply T
      <include refid="QueryParams"/>
      ) TT
      Where TT.Row_Index Between ((#PageIndex#-1)*#PageSize#+1) And (#PageIndex#*#PageSize#)
    </select>

    <select id="GetVList" parameterClass="Hashtable" resultClass="V_ChangeConsultantApply">
      Select T.*,TM.LoginName,TM.TrueName,TA.EMail,TA.UserName From T_ChangeConsultantApply AS T
      LEFT JOIN T_Member AS TM ON TM.Id=T.MemberId
      LEFT JOIN T_Administrator AS TA ON TA.Id=T.AdministratorId
      WHERE T.IsDelete=0
      <include refid="QueryVParams"/>
    </select>

    <!--获取分页数据-->
    <select id="GetVListByPage" parameterClass="Hashtable" resultClass="V_ChangeConsultantApply">
      Select T.*,TM.LoginName,TM.TrueName,TA.EMail,TA.UserName From (Select ROW_NUMBER() Over(Order By T.Id DESC) Row_Index,T.*
      From T_ChangeConsultantApply T
      ) T
      LEFT JOIN T_Member AS TM ON TM.Id=T.MemberId
      LEFT JOIN T_Administrator AS TA ON TA.Id=T.AdministratorId
      WHERE T.IsDelete=0
      <include refid="QueryVParams"/>
    </select>


    <!--获取记录数-->
    <select id="GetRecord" parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_ChangeConsultantApply T
      <include refid="QueryParams"/>
    </select>

    <!--获取表映射实体-->
    <select id="GetEntity" parameterClass="Hashtable" resultClass="T_ChangeConsultantApply">
      Select Top 1 T.* From T_ChangeConsultantApply T
      Where T.IsDelete=0
      <isNotEmpty prepend="And" property="Id">
        T.Id=#Id#
      </isNotEmpty>
    </select>

    <!--是否存在该记录-->
    <select id="IsExist"  parameterClass="Hashtable" resultClass="int">
      Select Count(1) From T_ChangeConsultantApply T
      <include refid="QueryParams"/>
    </select>

    <!--获取前N行数据-->
    <select id="GetTop" parameterClass="Hashtable" resultClass="T_ChangeConsultantApply">
      Select Top (#Num#) * From T_ChangeConsultantApply T
      <include refid="QueryParams"/>
    </select>
  </statements>
</sqlMap>